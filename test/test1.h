/*This file is auto generated by DbEntityGenerator*/
#pragma once

#include <qobject.h>
#include <qvariant.h>

#include "condition/EntityField.h"

class Test1 {
private:
    //主键
    qint64 id;
    //复合主键
    QString name;
    //浮点数字
    qreal number;
    //二进制
    QByteArray hex;

    QHash<QString, QVariant> __extra;

public:
    Test1() {
        name = "text";
        number = 10.0;
    }

    Test1(
        qint64 id,
        const QString& name,
        qreal number,
        const QByteArray& hex
    ) : id(id)
    , name(name)
    , number(number)
    , hex(hex)
    { }

public:
    struct Fields {
        EntityField<qint64> id = EntityField<qint64>("id");
        EntityField<QString> name = EntityField<QString>("name");
        EntityField<qreal> number = EntityField<qreal>("number");
        EntityField<QByteArray> hex = EntityField<QByteArray>("hex");
    };

    struct Info {
        static int fieldSize() {
            return 4;
        }

        static QString getTableName() {
            return QStringLiteral("ts_test1");
        }

        static QStringList getFields() {
            return QStringList()
                << "id"
                << "name"
                << "number"
                << "hex";
        }

        static QStringList getFieldsWithoutAutoIncrement() {
            return QStringList()
                << "id"
                << "name"
                << "number"
                << "hex";
        }

        static QStringList getFieldsType() {
            return QStringList() 
                << QStringLiteral("id integer")
                << QStringLiteral("name text default 'text'")
                << QStringLiteral("number real default 10.0")
                << QStringLiteral("hex blob");
        }

        static QStringList getPrimaryKeys() {
            return QStringList() << "id" << "name";
        }

        static QList<QStringList> getIndexFields() {
            return QList<QStringList>();
        }

        static QList<QStringList> getUniqueIndexFields() {
            return QList<QStringList>();
        }

        static bool isAutoIncrement(const QString& name) {
            return false;
        }
    };

    struct Tool {
        static QVariantList getValueWithoutAutoIncrement(const Test1& entity) {
            return QVariantList()
                << entity.id
                << entity.name
                << entity.number
                << entity.hex;
        }

        static QVariant getValueByName(const Test1& entity, const QString& target) {
            if (target == "id") {
                return entity.id;
            }
            if (target == "name") {
                return entity.name;
            }
            if (target == "number") {
                return entity.number;
            }
            if (target == "hex") {
                return entity.hex;
            }
            return entity.__extra.value(target);
        }

        static void bindAutoIncrementId(Test1& entity, const QVariant& id) {
            
        }

        static void bindValue(Test1& entity, const QString& target, QVariant value) {
            if (target == "id") {
                entity.id = value.value<qint64>();
            } else if (target == "name") {
                entity.name = value.value<QString>();
            } else if (target == "number") {
                entity.number = value.value<qreal>();
            } else if (target == "hex") {
                entity.hex = value.value<QByteArray>();
            } else {
                entity.__putExtra(target, value);
            }
        }
    };

public:
    //set 主键
    inline void setId(qint64 id) {this->id = id;}
    //get 主键
    inline qint64 getId() const {return id;}
    //set 复合主键
    inline void setName(const QString& name) {this->name = name;}
    //get 复合主键
    inline QString getName() const {return name;}
    //set 浮点数字
    inline void setNumber(qreal number) {this->number = number;}
    //get 浮点数字
    inline qreal getNumber() const {return number;}
    //set 二进制
    inline void setHex(const QByteArray& hex) {this->hex = hex;}
    //get 二进制
    inline QByteArray getHex() const {return hex;}
    //set temp data
    inline void __putExtra(const QString& key, const QVariant& extra) {this->__extra.insert(key, extra);}
    //get function select result, like get "as" field result
    inline QVariant __getExtra(const QString& key) {return __extra.value(key);}
};
typedef QList<Test1> Test1List;
Q_DECLARE_METATYPE(Test1);