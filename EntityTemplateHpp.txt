/*This file is auto generated by DbEntityGenerator*/
#pragma once

#include "../EntityField.h"

//************ CustomCodeArea ************
$CustomCode$
//!End

class $ClassName$ {
private:
$Members$
	QMap<QString, QVariant> extraData;

public:
	$ClassName$() = default;
	$ClassName$($ConstructFields$) {
	$ConstructCommit$}

public:
	struct Fields : public EntityFunction {
$Fields$
		void bindJoin(int order) {
			EntityField::bindTableOrder(order, $BindFieldList$);
		}

		void clearJoin() {
            EntityField::clearTableOrder($BindFieldList$);
        }

		EntityConditions all() {
			return ($BindFieldList$);
		}
	};

public:
	/*can be called by nullptr*/
	static int fieldSize() {
		return $FieldSize$;
	}
	/*can be called by nullptr*/
	static QString engine() {
		return "$EngineType$";
	}
	/*can be called by nullptr*/
	static QString getTableName() {
		return QStringLiteral("$TbName$");
	}
	/*can be called by nullptr*/
	static QStringList getFields() {
		Fields fields;
		return QStringList() $FieldList$;
	}
	/*can be called by nullptr*/
	static QStringList getFieldsType() {
		return QStringList() $FieldType$;
	}
	/*can be called by nullptr*/
	static QStringList getIndexFields() {
		Fields fields;
		return QStringList() $FieldIndex$;
	}
	/*can be called by nullptr*/
	static QString getIdField() {
		return $FieldId$;
	}

	QVariantList readEntity() const {
		return QVariantList() $ReadEntity$;
	}

	void bindId($IdType$ id) {
$BindId$
	}

	void bindValue(const QString& field, const QVariant& data) {
		Fields fields;
		$BindValues$
	}

	void putExtraData(const QString& name, const QVariant& data) {
		extraData.insert(name, data);
	}

$MemberGetterSetter$
	inline QMap<QString, QVariant> getExtraData() const {return extraData;}
};
typedef QList<$ClassName$> $ClassName$List;